<tool id="collection_column_join" name="Column Join" version="0.0.1">
    <description>
        on Collections
    </description>
    <requirements>
        <requirement type="package" version="8.22">gnu_coreutils</requirement>
    </requirements>
    <stdio>
        <exit_code range="1:" />
        <exit_code range=":-1" />
    </stdio>
    <command><![CDATA[
    	cp "${collection_column_join_script}" "${script_output}"
        &&
        sh "${collection_column_join_script}"
    ]]>
    </command>
    <configfiles>
        <configfile name="collection_column_join_script"><![CDATA[
#!/bin/sh
touch header0.tmp &&
touch output0.tmp &&
#set $delimiter = '\t'
#set $left_identifier_column = $identifier_column
#for $i, $tabular_item_key in enumerate( $input_tabular.keys() ):
    #set $tabular_item = $input_tabular[$tabular_item_key]
    #if $has_header:
        head -n ${has_header} "${tabular_item}" | awk '{ n = split(\$0,arr,"${delimiter}"); ctr=1; for(i=1;i<=n;i++){ if( i != $identifier_column ){ if( ctr > 1) {printf("${delimiter}")}; printf( "${tabular_item_key}_%s", arr[i] ); ctr++ } }; printf( "\n" ); }' > input_header.tmp &&
        tail -n +${has_header} "${tabular_item}" | LC_ALL=C sort -t "${delimiter}" -k $identifier_column > input_file.tmp &&
    #else:
        awk '{ n = split(\$0,arr,"${delimiter}"); ctr=1; for(i=1;i<=n;i++){ if( i != $identifier_column ){ if( ctr > 1) {printf("${delimiter}")}; printf( "${tabular_item_key}_%s", i ); ctr++ } }; exit }' "${tabular_item}" > input_header.tmp &&
        LC_ALL=C sort -t "${delimiter}" -k $identifier_column "${tabular_item}" > input_file.tmp &&
    #end if
    #if $i == 0:
        mv input_file.tmp output${ ( $i + 1 ) % 2 }.tmp &&
        #if $has_header:
            awk '{ \$${identifier_column}; exit }' "${tabular_item}" > header${ $i % 2 }.tmp &&
        #else:
            ##echo "#${tabular_item_key}_%s" > header${ $i % 2 }.tmp
            echo "#KEY" > header${ $i % 2 }.tmp &&
        #end if
    #else:
        LC_ALL=C join -o auto -a 1 -a 2 -1 ${left_identifier_column} -2 ${identifier_column} -t "${delimiter}" -e "${fill_char}" output${ $i % 2 }.tmp input_file.tmp  > output${ ( $i + 1 ) % 2 }.tmp &&
        #set $left_identifier_column = 1
    #end if
    paste -d "${delimiter}" header${ $i % 2 }.tmp input_header.tmp > header${ ( $i + 1 ) % 2 }.tmp &&
#end for
cat header${ ( $i + 1 ) % 2 }.tmp output${ ( $i + 1 ) % 2 }.tmp > "${tabular_output}"
    ]]>
        </configfile>
    </configfiles>
    <inputs>
        <param name="input_tabular" type="data_collection" format="tabular" collection_type="list" label="Tabular files"/>
        <!-- <param name="identifier_column" type="data_column" data_ref="input_tabular" value="0" min="0" optional="False" label="Identifier column"/> -->
        <param name="identifier_column" type="integer" value="6" min="0" optional="False" label="Identifier column"/>
        <param name="has_header" type="integer" value="0" min="0" optional="False" label="Number of Header lines in each item"/>
        <param name="keep_unpaired" type="boolean" truevalue="-a 1 -a 2" falsevalue="" checked="True" label="Keep unpaired inputs"/>
        <param name="fill_char" type="text" value="." optional="False" label="Fill character"/>
    </inputs>
    <outputs>
        <data format="tabular" name="tabular_output"/>
        <data format="txt" name="script_output"/>
    </outputs>
    <tests>
        <test>
            <!-- add tests -->
        </test>
    </tests>
    <help>
        <![CDATA[
        
        Joins tabular data collections together on a field.
        ]]>
    </help>
    <citations>
    </citations>
</tool>